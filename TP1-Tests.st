TestCase subclass: #CondicionTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!CondicionTest methodsFor: 'tests' stamp: 'NicolasZulaica 5/10/2021 20:57'!test02SospechodoCovidNoPuedeCircular	self deny: ( SospechosoCovid new ) puedeCircular.! !!CondicionTest methodsFor: 'tests' stamp: 'NicolasZulaica 5/10/2021 20:56'!test01VacunadoPuedeCircular	self assert: ( Vacunado new ) puedeCircular.! !TestCase subclass: #PermisoTests	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PermisoTests methodsFor: 'tests' stamp: 'NicolasZulaica 5/11/2021 20:27'!test04NoPuedeCircularYOtroEsNoPuedeCircular	self assert: ( NoPuedeCircular new y: DefectoCircular new ) class equals: NoPuedeCircular.	self assert: ( NoPuedeCircular new y: PuedeCircular  new ) class equals: NoPuedeCircular.	self assert: ( NoPuedeCircular new y: NoPuedeCircular new ) class equals: NoPuedeCircular.! !!PermisoTests methodsFor: 'tests' stamp: 'NicolasZulaica 5/11/2021 20:29'!test05PuedeCircularYOtroEsPuedeCircularExceptoQueSeDigaLoContrario	self assert: ( PuedeCircular new y: DefectoCircular new ) class equals: PuedeCircular.	self assert: ( PuedeCircular new y: PuedeCircular  new ) class equals: PuedeCircular.	self assert: ( PuedeCircular new y: NoPuedeCircular new ) class equals: NoPuedeCircular.! !!PermisoTests methodsFor: 'tests' stamp: 'NicolasZulaica 5/10/2021 20:55'!test01PuedeCircular	self assert: (PuedeCircular new) puedeCircular.! !!PermisoTests methodsFor: 'tests' stamp: 'NicolasZulaica 5/10/2021 20:56'!test02NoPuedeCircular	self deny: (NoPuedeCircular new) puedeCircular.! !!PermisoTests methodsFor: 'tests' stamp: 'NicolasZulaica 5/11/2021 20:22'!test03DefectoNoPuedeCircular	self deny: (DefectoCircular new) puedeCircular.! !!PermisoTests methodsFor: 'tests' stamp: 'NicolasZulaica 5/11/2021 20:30'!test06DefaultCircularYOtroEsOtro	self assert: ( DefectoCircular new y: DefectoCircular new ) class equals: DefectoCircular.	self assert: ( DefectoCircular new y: PuedeCircular  new ) class equals: PuedeCircular.	self assert: ( DefectoCircular new y: NoPuedeCircular new ) class equals: NoPuedeCircular.! !TestCase subclass: #PersonaTest	instanceVariableNames: 'persona'	classVariableNames: ''	package: 'TP1-Tests'!!PersonaTest methodsFor: 'running' stamp: 'NicolasZulaica 5/10/2021 18:17'!setUp	persona := Persona new.! !!PersonaTest methodsFor: 'tests' stamp: 'NicolasZulaica 5/10/2021 19:00'!test02PuedeCircularAlEstarVacunadx 	persona estaVacunadx.	self assert:( persona puedeCircular ).! !!PersonaTest methodsFor: 'tests' stamp: 'NicolasZulaica 5/10/2021 18:46'!test01PorDefectoNoPuedeCircular 	self deny:( persona puedeCircular ).! !!PersonaTest methodsFor: 'tests' stamp: 'NicolasZulaica 5/10/2021 21:54'!test04VacunadoNoPuedeCircularConSintomas	persona estaVacunadx.	persona agregarSintoma: 'tos'.	self deny: persona puedeCircular.! !!PersonaTest methodsFor: 'tests' stamp: 'NicolasZulaica 5/10/2021 20:43'!test03NoPuedeCircularConSintomas	persona agregarSintoma: 'tos'.		self deny: persona puedeCircular.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PersonaTest class	instanceVariableNames: 'persona'!